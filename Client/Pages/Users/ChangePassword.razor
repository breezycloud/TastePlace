@if (AppState.IsBusy)
{
    <Loader />
}
else
{
    <EditForm EditContext="@context" OnValidSubmit="@Save">
        <DataAnnotationsValidator />
        <MudDialog>
            <DialogContent>
                <MudGrid Spacing="1" Class="pa-2">
                    <MudItem xs="12">
                        <MudTextField T="string" Value="passwordModel!.OldPasswprd" Label="Old Password"
                                  Variant="Variant.Outlined" For="@(() => passwordModel!.OldPasswprd)" 
                                  ValueChanged="OldPasswordChanged"/>
                    </MudItem>
                    <MudItem xs="12" >
                        <MudTextField Disabled="@isReadOnly" ReadOnly="@isReadOnly" 
                            @bind-Value="passwordModel!.NewPassword" Label="New Password"
                            Variant="Variant.Outlined" For="@(() => passwordModel!.NewPassword)" />
                    </MudItem>                    
                </MudGrid>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="Cancel">Close</MudButton>
                <MudButton Disabled="AppState.IsProcessing" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                       Color="Color.Primary">@(AppState.IsProcessing ? "Processing" : "Save")</MudButton>
                </DialogActions>
            </MudDialog>
        </EditForm>
}


@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    private User? user = new();
    private NewPasswordModel? passwordModel = new();
    private EditContext? context = new(new NewPasswordModel());
    [Parameter] public Guid id { get; set; }
    private bool isReadOnly { get; set; } = true;
    protected override async Task OnInitializedAsync()
    {
        AppState.IsBusy = true;                
        context = new(passwordModel!);
        await Task.Yield();
        AppState.IsBusy = false;
    }

    void Cancel() => MudDialog?.Cancel();

    void OldPasswordChanged(string oldPassword)
    {
        string hashedPassword = Security.Encrypt(oldPassword);
        if (hashedPassword == passwordModel!.HashedPassword)
        {
            isReadOnly = false;
        }
        passwordModel.OldPasswprd = oldPassword;
    }

    private async Task Save()
    {
        AppState.IsProcessing = true;
        var prompt = await Dialog.ShowMessageBox("Confirmation", "Do you wish update password", yesText: "Yes", cancelText: "No");
        if (prompt is null || !prompt.Value)
        {
            AppState.IsProcessing = false;
            return;
        }
        string hashedPassword = Security.Encrypt(passwordModel!.NewPassword!);        
        snackBar.Add("Password Successfully Updated", Severity.Success);
        passwordModel = new();
        Cancel();
        AppState.IsProcessing = false;
    }

}